import pytest

from pyfinding import find_path_len_with_a_star, get_expected_length, get_movements


@pytest.fixture
def small_field() -> list[str]:
    return ["*#..#", ".#*#.", "*...*"]


@pytest.mark.parametrize(
    "position,expected",
    [
        [(0, 0), [(1, 0)]],
        [(1, 2), [(0, 2), (2, 2)]],
    ],
)
def test_get_movements(
    small_field: list[str], position: tuple[int, int], expected: list[list[int]]
) -> None:
    movements = get_movements(position, small_field)
    assert sorted(movements, key=lambda x: tuple(x)) == expected


@pytest.mark.parametrize(
    "a,b,expected",
    [
        [(0, 0), (2, 0), 2],
        [(0, 0), (2, 4), 6],
        [(0, 0), (1, 2), 5],
    ],
    ids=["short", "long", "turn"],
)
def test_path_len_from_a_to_b(
    small_field: list[str], a: tuple[int, int], b: tuple[int, int], expected: int
) -> None:
    path_len = find_path_len_with_a_star(a, b, small_field)
    assert path_len == expected


@pytest.mark.parametrize(
    "field, k, expected, delta",
    [
        [["*..", "#.#", "*.*"], 2, 3.333, 0],
        [["*#..#", ".#*#.", "*...*"], 2, 3.833, 0],
        [["*#..#", ".#*#.", "*...*"], 4, 8, 0],
        [
            ["#.#**", "....#", "#*#**", "**#*#", "#..##", "*#..#", ".#.#.", "....*"],
            3,
            10.825,
            0,
        ],
        [
            [
                "###################",
                "#*###############*#",
                "#.....#######.....#",
                "#*###*.#.*.#.*###*#",
                "#*####*.*#*.*####*#",
                "#*#####*###*#####*#",
                "###################",
            ],
            9,
            30.272,
            0.035,
        ],
        pytest.param(
            [
                "**##*.**#..#.*...*#...*#..#.##..#..#.#*...#.##*##.",
                ".#..###..#..#.#.##..#.#.*#.*..#..#.#*..##.#*...*..",
                "..#.....###.#*.##..#.#.#*..#.#..#....#..#...#*####",
                ".#.##*#.*#..#*#*.#.#...*.#.*#.#.##.#*.##.#.#..*...",
                "..*.*#*.###.#..#.#..##.##.*#..#.....#.....#..#.#.#",
                ".#.##.#..##..*#..#.#...#*##*#*..#.#.#.#.##.##.#.#*",
                "..##....#..#.#*#...*.##...#.#.####...#.#*.....#...",
                ".#.*#.##.*#*.#*.#.#.#..#.#..#.#*#.###..##.##.#.##*",
                ".*.#*..*.#.#...#.*##.#.**.#.*...**..*#..#.#.#*.#..",
                ".#*.#*##....##.#.#*..*.###.#.##.##.#.#.#....#.#*.#",
                "*.#..#*#.#*#*....#.#.#..*#**...##.#.#.**#*##.*.#..",
                ".#*.##..##..##.#.#..#.#.###.###...#...#*#..##*#.#.",
                "#..#*.#..*.###..#.#...#.###.#.#*#.#.#**##.#...*.#*",
                "..#..#.#.##.#..#.**.##*#.#**.**..#.#..#...#.##*#..",
                ".#*#.#.*..#.*#...#.#...#...#.##.#..*#*.##*....###.",
                ".*.#.#.#.#*#..*##.**.##*##..#.*#.#*###..*.#.##.#..",
                ".#......#...#.#.*#.#.#..#..#.#*#....#*.#*#.*#..*.#",
                "#..####..#*#...#*.#..#.###...#.#.#.###*#..##*##.#.",
                ".#.*..#.#...#.#..#.##...#..#.#.#.#.###..##..*.*.*.",
                ".#.#.#.#..##.*..#.*.#.##.#..##*...#.#..#.#.##.#.##",
                ".#..#*.#.#..#.##..##..#.*..#.*#.#...##....#...###.",
                ".#.#.#.#*.#.#..#.#..#..#.#.*#...#.##...#.##.##.*..",
                ".#...#.#.##.#.#..*#.*#..###..#.#.#*###.##...#*.##.",
                ".#.##.*.......*.#.*#.#.#*###..*...*..#.*.##.#.#..#",
                "...###*####*#.#..##*...#..#..##.#.#.#..##*#*.*.*#.",
                "#.#.#....*#..#.#.#.#.##..#*.#...#..#.#*#...#.##.*.",
                "..*.#*##.#.#*#.###...#..##.#.#.#*###*#.*#.#.*###.#",
                "##*##..##...#.....##.#.#.**#..#*.....##.#..#*.#.*.",
                ".....#.*.##..##.##*.*#...#.#.#.##.#*#.**..#..#.#.#",
                "##.#.#*##.#.#.*.*.#.#*#.#.#....*...#*##*##.#....#.",
                "*.**#**....*..##.#*.*.**..##.###.##.....##...##.**",
                "#.####.##*#*##..#.*#*#.##*...#.##..#.##....#*..##.",
                "....#...##.#...#*.#..##.##.#*..*.#....##.#.*##...#",
                "#.#..*##*..#.#..#..#..#*....#.##..##.#*##.##.*##..",
                "..#.#*.*.##.#.#*#.#*##.###.##...#............#*.#.",
                "#.#.##.#....*....*..##..*#.#.#.###.#.#.#.###..#..#",
                ".#**..#*#.#*#*#.#.#...*##....##.#*..#..#*..*#..#..",
                "...#*#.....#..#.#..#*#.*##.#..#.#.##..#.*#*#.#...#",
                ".#*.###.#.#.#.#.*#*##.##..#.#*..#...#.#.#..#*.*#..",
                "#*.#.#.#..#..#..#....*#.*##..##.#.#..#...##.#.#..#",
                "*.#..#..#...#..##.#*#..#.#*#.#.#.###..#.#*...#.#..",
                "#...#.#...#.#.#..#.*.#*.....**.*..#*##.#*.##....##",
                "#*#....#*#..#.*.###*#..#*##.##.#.#...#.*.##.##.##.",
                "..##*##*..#*#.#..#*.*##*.##.#...#.#.#.#.#..*#.##..",
                "#...#*##.#*#**.##.*#.*.##..*.#*#**....#**##...*.*#",
                "*#.##......*#.##.#.#.##**.#.#.#.#.#.##..#...#*#*#*",
                "*....##.#.#..#.....#..##.#....*....#.#.##.#.#.##**",
                "#.##*#...#..#.#.##..#..##.##.##.##........##.#*#.#",
                "..#...#.#*#*..*#..*#.*#.#......##.#.#.#*#..#..****",
                ".###.#..#...#.#..#..#.#...#.#.#...**.#..*#*.*##*#.",
            ],
            150,
            1309.495,
            0.05,
            marks=pytest.mark.skip(reason="Too slow"),
        ),
    ],
    ids=[
        "xxs",
        "xs",
        "s",
        "m",
        "l",
        "xl",
    ],
)
def test_pathfinding(field: list[str], k: int, expected: float, delta: float) -> None:
    max_expected = expected * (1 + delta)
    result = get_expected_length(field, k)

    assert (
        round(result, 3) <= max_expected
    ), f"Result: {result} expected {expected} (at most {max_expected})"
